exit
WeatherForecast.where(date: r['EpochTime']).first_or_create(temperature: r.dig('Temperature', 'Metric', 'Value'))
r = answer[0]
answer[0]
answer.count
answer = respond_with(response)
respond_with(response)
response ||= Faraday.get("#{BASE_URL}/currentconditions/v1/#{location_key}/historical/24?", options.slice(:apikey))
response
options.slice(:apikey)
location_key
exit
response
exit
response.status
response.success?
exit
response.success?
response.successful?
response.status
response.body
JSON.parse(response.body)['Code']
JSON.parse(response.body)['Code'] == "404"
exit
JSON.parse(response.body)['Code'] == "404"
JSON.parse(response.body)['Code']
JSON.parse(response.body)
response.body
response
exit
connection
response ||= connection.get(PATH, options)
